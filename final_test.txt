#include <HardwareSerial.h>
#include <TinyGPS++.h>
#include <FS.h>
#include <SD.h>
#include <SPI.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <time.h>
// GPS Module Connections
#define RXD2 16   // ESP32 RX2 pin
#define TXD2 17   // ESP32 TX2 pin
const int TOUCH_PIN = 4;
// SD Card Connections
#define SD_CS_PIN 5   // Chip select pin for SD card module

// Create objects
HardwareSerial neogps(2);  // Use Hardware Serial2 for ESP32
TinyGPSPlus gps;
File logFile;
unsigned long sendDataPrevMillis = 0;
bool signupOK = false;
// Global variable to track touch count
int touchCount = 0;
#define WIFI_SSID "NS";
#define WIFI_PASSWORD "12345678";

// Firebase credentials
#define API_KEY "AIzaSyC-ifSHeSmrcIaaBianFHaWlTz5su65yB4";
#define DATABASE_URL "https://hardwired01-230d5-default-rtdb.asia-southeast1.firebasedatabase.app/";
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
void setup() {

  // Initialize Serial Monitor
  Serial.begin(115200);
  pinMode(TOUCH_PIN, INPUT_PULLUP);
  
  // Initialize GPS Serial
  neogps.begin(9600, SERIAL_8N1, RXD2, TXD2);
  
  // Initialize SD Card
  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("SD Card Mount Failed");
    return;
  }

  // Create or open log file
  logFile = SD.open("/gps_log.txt", FILE_APPEND);
  if (!logFile) {
    Serial.println("Failed to open file for writing");
    return;
  }
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase signUp OK");
    signupOK = true;
  } else {
    Serial.printf("Firebase signUp failed: %s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Set up NTP for timestamp
  configTime(0, 0, "pool.ntp.org", "time.nist.gov"); // Use NTP servers
  setenv("TZ", "IST-5:30", 1);                      // Set timezone (IST)
  tzset();                                          // Apply the timezone
  Serial.println("Time synchronized with NTP server.");
  
  // Write file header if it's a new file
  if (logFile.size() == 0) {
    logFile.println("Timestamp,Latitude,Longitude,Altitude,Speed,Satellites");
    logFile.flush();
  }
  
  Serial.println("GPS and SD Card Initialized Successfully");
}

void loop() {

  // Read touch sensor state
  int touchState = digitalRead(TOUCH_PIN);
  
  // Increment touch count when sensor is touched
  if (touchState == HIGH) {
    touchCount++;
    
    // Print current touch count
    // Serial.print("Touch Count: ");
    // Serial.println(touchCount);
    
    // Provide feedback about logging state
    if (touchCount % 2 != 0) {
      Serial.println("Logging STARTED ");
    } else {
      Serial.println("Logging STOPPED ");
    }
    
    // Debounce delay
    delay(500);
  }

  // Only run GPS logging when touch count is ODD
  if (touchCount % 2 != 0) {
    
    while (neogps.available() > 0) {
      if (gps.encode(neogps.read())) {
        logGPSData();
      }
    }

    // Handle no data scenario
    if (millis() > 5000 && gps.charsProcessed() < 10) {
      Serial.println("No GPS data received: check wiring");
      
      if (logFile) {
        logFile.println("No GPS data received: check wiring");
        logFile.flush();
      }
    }
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("WiFi disconnected. Reconnecting...");
      connectToWiFi();
    }
    sscanf(line.c_str(), "%d,%19[^,],%f,%f,%f,%f", &log, timestamp, &latitude, &longitude, &orientation, &value1);
      // Send data to Firebase if connected
      if (Firebase.ready() && signupOK) {
        if (Firebase.RTDB.setInt(&fbdo, "dataLogs/" + String(log) + "/log", log) &&
          Firebase.RTDB.setString(&fbdo, "dataLogs/" + String(log) + "/timestamp", String(timestamp)) &&
          Firebase.RTDB.setFloat(&fbdo, "dataLogs/" + String(log) + "/latitude", latitude) &&
          Firebase.RTDB.setFloat(&fbdo, "dataLogs/" + String(log) + "/longitude", longitude) &&
          Firebase.RTDB.setFloat(&fbdo, "dataLogs/" + String(log) + "/orientation", orientation) &&
          Firebase.RTDB.setFloat(&fbdo, "dataLogs/" + String(log) + "/value1", value1)) {
          Serial.println("Data successfully uploaded to Firebase.");
        } else {
          Serial.println("FAILED to upload data to Firebase: " + fbdo.errorReason());
        }
      }
    }

  }


 delay(100);  // Small delay to prevent excessive looping
}

void logGPSData() {
  // Check if valid location data is available
  if (gps.location.isValid()) {
    // Prepare timestamp
    String timestamp = getTimestamp();
    
    // Prepare data string
    String dataString = String(timestamp) + "," + 
                        String(gps.location.lat(), 6) + "," + 
                        String(gps.location.lng(), 6) + "," + 
                        String(gps.altitude.meters(), 2) + "," + 
                        String(gps.speed.kmph(), 2) + "," + 
                        String(gps.satellites.value());

    // Print to Serial Monitor
    Serial.println(dataString);
 
    // Write to SD Card
    if (logFile) {
      logFile.println(dataString);
      logFile.flush();  // Ensure data is written immediately
    }
  } else {
    // Print error if no valid location
    Serial.println("Waiting for valid GPS signal...");
  }
}

String getTimestamp() {
  // Create a formatted timestamp if time is available
  if (gps.time.isValid() && gps.date.isValid()) {
    char timestamp[20];
    snprintf(timestamp, sizeof(timestamp), 
             "%04d-%02d-%02d %02d:%02d:%02d", 
             gps.date.year(), gps.date.month(), gps.date.day(),
             gps.time.hour(), gps.time.minute(), gps.time.second());
    return String(timestamp);
  }
  return "No Timestamp";
}

void connectToWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Connecting to WiFi...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    unsigned long startAttemptTime = millis();

    // Wait for connection or timeout after 10 seconds
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      delay(1000);
      Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi connected.");
      Serial.println("IP Address: " + WiFi.localIP().toString());
    } else {
      Serial.println("\nFailed to connect to WiFi.");
    }
  }
}