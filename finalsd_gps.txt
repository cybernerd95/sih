#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <TinyGPS++.h>
#include <HardwareSerial.h>

TinyGPSPlus gps;
HardwareSerial mySerial(1);

#define RXPin 16 // GPS TX
#define TXPin 17 // GPS RX
#define GPSBaud 9600
#define CSPin 5  // SD card CS pin

void writeFile(fs::FS &fs, const char *path, const char *message) {
    Serial.printf("Writing file: %s\n", path);
    File file = fs.open(path, FILE_WRITE);
    if (!file) {
        Serial.println("Failed to open file for writing");
        return;
    }
    if (file.print(message)) {
        Serial.println("File written successfully");
    } else {
        Serial.println("Write failed");
    }
    file.close();
}

void appendFile(fs::FS &fs, const char *path, const char *message) {
    Serial.printf("Appending to file: %s\n", path);
    File file = fs.open(path, FILE_APPEND);
    if (!file) {
        Serial.println("Failed to open file for appending");
        return;
    }
    if (file.print(message)) {
        Serial.println("Message appended successfully");
    } else {
        Serial.println("Append failed");
    }
    file.close();
}

String formatCoordinate(double coordinate, bool isLatitude) {
    // Take absolute value of coordinate
    double absCoord = abs(coordinate);
    
    // Get whole degrees
    int degrees = (int)absCoord;
    
    // Determine direction
    String direction;
    if (isLatitude) {
        direction = (coordinate >= 0) ? " degrees North" : " degrees South";
    } else {
        direction = (coordinate >= 0) ? " degrees East" : " degrees West";
    }
    
    // Create formatted string with full coordinate
    char formattedCoord[50];
    snprintf(formattedCoord, sizeof(formattedCoord), "%d%s (%.6f)", 
             degrees, direction.c_str(), absCoord);
    
    return String(formattedCoord);
}

void printSerialData(const char* timestamp, const String& latString, const String& longString, int int1, int int2) {
    Serial.println("===== GPS DATA =====");
    Serial.print("Timestamp: ");
    Serial.println(timestamp);
    
    Serial.print("Latitude: ");
    Serial.println(latString);
    
    Serial.print("Longitude: ");
    Serial.println(longString);
    
    Serial.print("Integer 1: ");
    Serial.println(int1);
    
    Serial.print("Integer 2: ");
    Serial.println(int2);
    
    Serial.println("====================");
}

void setup() {
    Serial.begin(115200);
    mySerial.begin(GPSBaud, SERIAL_8N1, RXPin, TXPin);

    // SD Card initialization (same as previous code)
    Serial.println("Initializing SD card...");
    if(!SD.begin(CSPin)){
        Serial.println("Card Mount Failed");
        return;
    }

    // Write CSV header
    writeFile(SD, "/gps_data.csv", "Date,Time,Latitude,Longitude,Int1,Int2\n");
    
    Serial.println("GPS Logging System Initialized");
}

void loop() {
    while (mySerial.available() > 0) {
        char c = mySerial.read();

        if (gps.encode(c)) {
            if (gps.location.isUpdated() && gps.time.isValid() && gps.date.isValid()) {
                // Get GPS data
                double latitude = gps.location.lat();
                double longitude = gps.location.lng();

                // Format coordinates
                String latString = formatCoordinate(latitude, true);
                String longString = formatCoordinate(longitude, false);

                // Get GPS time and date
                int year = gps.date.year();
                int month = gps.date.month();
                int day = gps.date.day();
                int hour = gps.time.hour();
                int minute = gps.time.minute();
                int second = gps.time.second();

                // Time zone adjustment (example: UTC+5:30 for IST)
                hour += 5;
                minute += 30;
                if (minute >= 60) {
                    minute -= 60;
                    hour += 1;
                }
                if (hour >= 24) {
                    hour -= 24;
                    day += 1; // Simple day adjustment (not considering month boundaries)
                }

                // Define your integer values here
                int int1 = 42; // Replace with your own logic
                int int2 = 99; // Replace with your own logic

                // Prepare the timestamp
                char timestamp[32];
                snprintf(timestamp, sizeof(timestamp), "%04d-%02d-%02d,%02d:%02d:%02d",
                         year, month, day, hour, minute, second);

                // Print to Serial Monitor
                printSerialData(timestamp, latString, longString, int1, int2);

                // Prepare the CSV entry
                char entry[200];
                snprintf(entry, sizeof(entry), "%s,%s,%s,%d,%d\n",
                         timestamp, latString.c_str(), longString.c_str(), int1, int2);

                // Append to CSV file
                appendFile(SD, "/gps_data.csv", entry);
            } else {
                Serial.println("Waiting for valid GPS data...");
            }
        }
    }

    // Optional: Add a small delay to prevent overwhelming the serial monitor
    delay(100);
}